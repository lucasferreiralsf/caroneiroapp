// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTrip {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createTrip(data: TripCreateInput!): Trip!
  updateTrip(data: TripUpdateInput!, where: TripWhereUniqueInput!): Trip
  updateManyTrips(data: TripUpdateManyMutationInput!, where: TripWhereInput): BatchPayload!
  upsertTrip(where: TripWhereUniqueInput!, create: TripCreateInput!, update: TripUpdateInput!): Trip!
  deleteTrip(where: TripWhereUniqueInput!): Trip
  deleteManyTrips(where: TripWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  trip(where: TripWhereUniqueInput!): Trip
  trips(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip]!
  tripsConnection(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TripConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum RecurrenceTypes {
  DAILY
  WEEKLY
  MONTHLY
}

type Subscription {
  trip(where: TripSubscriptionWhereInput): TripSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Trip {
  id: ID!
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  travelOwner: User!
  passengers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TripConnection {
  pageInfo: PageInfo!
  edges: [TripEdge]!
  aggregate: AggregateTrip!
}

input TripCreateInput {
  id: ID
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  travelOwner: UserCreateOneWithoutOwnerTripsInput!
  passengers: UserCreateManyWithoutTripsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TripCreateManyWithoutPassengersInput {
  create: [TripCreateWithoutPassengersInput!]
  connect: [TripWhereUniqueInput!]
}

input TripCreateManyWithoutTravelOwnerInput {
  create: [TripCreateWithoutTravelOwnerInput!]
  connect: [TripWhereUniqueInput!]
}

input TripCreateWithoutPassengersInput {
  id: ID
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  travelOwner: UserCreateOneWithoutOwnerTripsInput!
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TripCreateWithoutTravelOwnerInput {
  id: ID
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  passengers: UserCreateManyWithoutTripsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

type TripEdge {
  node: Trip!
  cursor: String!
}

enum TripOrderByInput {
  id_ASC
  id_DESC
  travelName_ASC
  travelName_DESC
  travelDate_ASC
  travelDate_DESC
  travelCost_ASC
  travelCost_DESC
  isSharingCost_ASC
  isSharingCost_DESC
  isRecurrent_ASC
  isRecurrent_DESC
  recurrenceTimes_ASC
  recurrenceTimes_DESC
  recurrenceType_ASC
  recurrenceType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TripPreviousValues {
  id: ID!
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TripScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  travelName: String
  travelName_not: String
  travelName_in: [String!]
  travelName_not_in: [String!]
  travelName_lt: String
  travelName_lte: String
  travelName_gt: String
  travelName_gte: String
  travelName_contains: String
  travelName_not_contains: String
  travelName_starts_with: String
  travelName_not_starts_with: String
  travelName_ends_with: String
  travelName_not_ends_with: String
  travelDate: DateTime
  travelDate_not: DateTime
  travelDate_in: [DateTime!]
  travelDate_not_in: [DateTime!]
  travelDate_lt: DateTime
  travelDate_lte: DateTime
  travelDate_gt: DateTime
  travelDate_gte: DateTime
  travelCost: Float
  travelCost_not: Float
  travelCost_in: [Float!]
  travelCost_not_in: [Float!]
  travelCost_lt: Float
  travelCost_lte: Float
  travelCost_gt: Float
  travelCost_gte: Float
  isSharingCost: Boolean
  isSharingCost_not: Boolean
  isRecurrent: Boolean
  isRecurrent_not: Boolean
  recurrenceTimes: Int
  recurrenceTimes_not: Int
  recurrenceTimes_in: [Int!]
  recurrenceTimes_not_in: [Int!]
  recurrenceTimes_lt: Int
  recurrenceTimes_lte: Int
  recurrenceTimes_gt: Int
  recurrenceTimes_gte: Int
  recurrenceType: RecurrenceTypes
  recurrenceType_not: RecurrenceTypes
  recurrenceType_in: [RecurrenceTypes!]
  recurrenceType_not_in: [RecurrenceTypes!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TripScalarWhereInput!]
  OR: [TripScalarWhereInput!]
  NOT: [TripScalarWhereInput!]
}

type TripSubscriptionPayload {
  mutation: MutationType!
  node: Trip
  updatedFields: [String!]
  previousValues: TripPreviousValues
}

input TripSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TripWhereInput
  AND: [TripSubscriptionWhereInput!]
}

input TripUpdateInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  travelOwner: UserUpdateOneRequiredWithoutOwnerTripsInput
  passengers: UserUpdateManyWithoutTripsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TripUpdateManyDataInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TripUpdateManyMutationInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TripUpdateManyWithoutPassengersInput {
  create: [TripCreateWithoutPassengersInput!]
  delete: [TripWhereUniqueInput!]
  connect: [TripWhereUniqueInput!]
  set: [TripWhereUniqueInput!]
  disconnect: [TripWhereUniqueInput!]
  update: [TripUpdateWithWhereUniqueWithoutPassengersInput!]
  upsert: [TripUpsertWithWhereUniqueWithoutPassengersInput!]
  deleteMany: [TripScalarWhereInput!]
  updateMany: [TripUpdateManyWithWhereNestedInput!]
}

input TripUpdateManyWithoutTravelOwnerInput {
  create: [TripCreateWithoutTravelOwnerInput!]
  delete: [TripWhereUniqueInput!]
  connect: [TripWhereUniqueInput!]
  set: [TripWhereUniqueInput!]
  disconnect: [TripWhereUniqueInput!]
  update: [TripUpdateWithWhereUniqueWithoutTravelOwnerInput!]
  upsert: [TripUpsertWithWhereUniqueWithoutTravelOwnerInput!]
  deleteMany: [TripScalarWhereInput!]
  updateMany: [TripUpdateManyWithWhereNestedInput!]
}

input TripUpdateManyWithWhereNestedInput {
  where: TripScalarWhereInput!
  data: TripUpdateManyDataInput!
}

input TripUpdateWithoutPassengersDataInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  travelOwner: UserUpdateOneRequiredWithoutOwnerTripsInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TripUpdateWithoutTravelOwnerDataInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  passengers: UserUpdateManyWithoutTripsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TripUpdateWithWhereUniqueWithoutPassengersInput {
  where: TripWhereUniqueInput!
  data: TripUpdateWithoutPassengersDataInput!
}

input TripUpdateWithWhereUniqueWithoutTravelOwnerInput {
  where: TripWhereUniqueInput!
  data: TripUpdateWithoutTravelOwnerDataInput!
}

input TripUpsertWithWhereUniqueWithoutPassengersInput {
  where: TripWhereUniqueInput!
  update: TripUpdateWithoutPassengersDataInput!
  create: TripCreateWithoutPassengersInput!
}

input TripUpsertWithWhereUniqueWithoutTravelOwnerInput {
  where: TripWhereUniqueInput!
  update: TripUpdateWithoutTravelOwnerDataInput!
  create: TripCreateWithoutTravelOwnerInput!
}

input TripWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  travelName: String
  travelName_not: String
  travelName_in: [String!]
  travelName_not_in: [String!]
  travelName_lt: String
  travelName_lte: String
  travelName_gt: String
  travelName_gte: String
  travelName_contains: String
  travelName_not_contains: String
  travelName_starts_with: String
  travelName_not_starts_with: String
  travelName_ends_with: String
  travelName_not_ends_with: String
  travelDate: DateTime
  travelDate_not: DateTime
  travelDate_in: [DateTime!]
  travelDate_not_in: [DateTime!]
  travelDate_lt: DateTime
  travelDate_lte: DateTime
  travelDate_gt: DateTime
  travelDate_gte: DateTime
  travelCost: Float
  travelCost_not: Float
  travelCost_in: [Float!]
  travelCost_not_in: [Float!]
  travelCost_lt: Float
  travelCost_lte: Float
  travelCost_gt: Float
  travelCost_gte: Float
  travelOwner: UserWhereInput
  passengers_some: UserWhereInput
  isSharingCost: Boolean
  isSharingCost_not: Boolean
  isRecurrent: Boolean
  isRecurrent_not: Boolean
  recurrenceTimes: Int
  recurrenceTimes_not: Int
  recurrenceTimes_in: [Int!]
  recurrenceTimes_not_in: [Int!]
  recurrenceTimes_lt: Int
  recurrenceTimes_lte: Int
  recurrenceTimes_gt: Int
  recurrenceTimes_gte: Int
  recurrenceType: RecurrenceTypes
  recurrenceType_not: RecurrenceTypes
  recurrenceType_in: [RecurrenceTypes!]
  recurrenceType_not_in: [RecurrenceTypes!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TripWhereInput!]
}

input TripWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTrips(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip!]
  tripsAsPassenger(where: TripWhereInput, orderBy: TripOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Trip!]
  emailToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTrips: TripCreateManyWithoutTravelOwnerInput
  tripsAsPassenger: TripCreateManyWithoutPassengersInput
  emailToken: String
}

input UserCreateManyWithoutTripsAsPassengerInput {
  create: [UserCreateWithoutTripsAsPassengerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutOwnerTripsInput {
  create: UserCreateWithoutOwnerTripsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOwnerTripsInput {
  id: ID
  firstName: String!
  lastName: String!
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  tripsAsPassenger: TripCreateManyWithoutPassengersInput
  emailToken: String
}

input UserCreateWithoutTripsAsPassengerInput {
  id: ID
  firstName: String!
  lastName: String!
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTrips: TripCreateManyWithoutTravelOwnerInput
  emailToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  primaryPhoneNumber_ASC
  primaryPhoneNumber_DESC
  secondaryPhoneNumber_ASC
  secondaryPhoneNumber_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  emailIsVerified_ASC
  emailIsVerified_DESC
  primaryPhoneNumberIsVerified_ASC
  primaryPhoneNumberIsVerified_DESC
  googleId_ASC
  googleId_DESC
  facebookId_ASC
  facebookId_DESC
  emailToken_ASC
  emailToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  emailToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  primaryPhoneNumber: String
  primaryPhoneNumber_not: String
  primaryPhoneNumber_in: [String!]
  primaryPhoneNumber_not_in: [String!]
  primaryPhoneNumber_lt: String
  primaryPhoneNumber_lte: String
  primaryPhoneNumber_gt: String
  primaryPhoneNumber_gte: String
  primaryPhoneNumber_contains: String
  primaryPhoneNumber_not_contains: String
  primaryPhoneNumber_starts_with: String
  primaryPhoneNumber_not_starts_with: String
  primaryPhoneNumber_ends_with: String
  primaryPhoneNumber_not_ends_with: String
  secondaryPhoneNumber: String
  secondaryPhoneNumber_not: String
  secondaryPhoneNumber_in: [String!]
  secondaryPhoneNumber_not_in: [String!]
  secondaryPhoneNumber_lt: String
  secondaryPhoneNumber_lte: String
  secondaryPhoneNumber_gt: String
  secondaryPhoneNumber_gte: String
  secondaryPhoneNumber_contains: String
  secondaryPhoneNumber_not_contains: String
  secondaryPhoneNumber_starts_with: String
  secondaryPhoneNumber_not_starts_with: String
  secondaryPhoneNumber_ends_with: String
  secondaryPhoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailIsVerified: Boolean
  emailIsVerified_not: Boolean
  primaryPhoneNumberIsVerified: Boolean
  primaryPhoneNumberIsVerified_not: Boolean
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  facebookId: String
  facebookId_not: String
  facebookId_in: [String!]
  facebookId_not_in: [String!]
  facebookId_lt: String
  facebookId_lte: String
  facebookId_gt: String
  facebookId_gte: String
  facebookId_contains: String
  facebookId_not_contains: String
  facebookId_starts_with: String
  facebookId_not_starts_with: String
  facebookId_ends_with: String
  facebookId_not_ends_with: String
  emailToken: String
  emailToken_not: String
  emailToken_in: [String!]
  emailToken_not_in: [String!]
  emailToken_lt: String
  emailToken_lte: String
  emailToken_gt: String
  emailToken_gte: String
  emailToken_contains: String
  emailToken_not_contains: String
  emailToken_starts_with: String
  emailToken_not_starts_with: String
  emailToken_ends_with: String
  emailToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTrips: TripUpdateManyWithoutTravelOwnerInput
  tripsAsPassenger: TripUpdateManyWithoutPassengersInput
  emailToken: String
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  emailToken: String
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  emailToken: String
}

input UserUpdateManyWithoutTripsAsPassengerInput {
  create: [UserCreateWithoutTripsAsPassengerInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTripsAsPassengerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTripsAsPassengerInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutOwnerTripsInput {
  create: UserCreateWithoutOwnerTripsInput
  update: UserUpdateWithoutOwnerTripsDataInput
  upsert: UserUpsertWithoutOwnerTripsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutOwnerTripsDataInput {
  firstName: String
  lastName: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  tripsAsPassenger: TripUpdateManyWithoutPassengersInput
  emailToken: String
}

input UserUpdateWithoutTripsAsPassengerDataInput {
  firstName: String
  lastName: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTrips: TripUpdateManyWithoutTravelOwnerInput
  emailToken: String
}

input UserUpdateWithWhereUniqueWithoutTripsAsPassengerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTripsAsPassengerDataInput!
}

input UserUpsertWithoutOwnerTripsInput {
  update: UserUpdateWithoutOwnerTripsDataInput!
  create: UserCreateWithoutOwnerTripsInput!
}

input UserUpsertWithWhereUniqueWithoutTripsAsPassengerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTripsAsPassengerDataInput!
  create: UserCreateWithoutTripsAsPassengerInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  primaryPhoneNumber: String
  primaryPhoneNumber_not: String
  primaryPhoneNumber_in: [String!]
  primaryPhoneNumber_not_in: [String!]
  primaryPhoneNumber_lt: String
  primaryPhoneNumber_lte: String
  primaryPhoneNumber_gt: String
  primaryPhoneNumber_gte: String
  primaryPhoneNumber_contains: String
  primaryPhoneNumber_not_contains: String
  primaryPhoneNumber_starts_with: String
  primaryPhoneNumber_not_starts_with: String
  primaryPhoneNumber_ends_with: String
  primaryPhoneNumber_not_ends_with: String
  secondaryPhoneNumber: String
  secondaryPhoneNumber_not: String
  secondaryPhoneNumber_in: [String!]
  secondaryPhoneNumber_not_in: [String!]
  secondaryPhoneNumber_lt: String
  secondaryPhoneNumber_lte: String
  secondaryPhoneNumber_gt: String
  secondaryPhoneNumber_gte: String
  secondaryPhoneNumber_contains: String
  secondaryPhoneNumber_not_contains: String
  secondaryPhoneNumber_starts_with: String
  secondaryPhoneNumber_not_starts_with: String
  secondaryPhoneNumber_ends_with: String
  secondaryPhoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailIsVerified: Boolean
  emailIsVerified_not: Boolean
  primaryPhoneNumberIsVerified: Boolean
  primaryPhoneNumberIsVerified_not: Boolean
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  facebookId: String
  facebookId_not: String
  facebookId_in: [String!]
  facebookId_not_in: [String!]
  facebookId_lt: String
  facebookId_lte: String
  facebookId_gt: String
  facebookId_gte: String
  facebookId_contains: String
  facebookId_not_contains: String
  facebookId_starts_with: String
  facebookId_not_starts_with: String
  facebookId_ends_with: String
  facebookId_not_ends_with: String
  ownerTrips_some: TripWhereInput
  tripsAsPassenger_some: TripWhereInput
  emailToken: String
  emailToken_not: String
  emailToken_in: [String!]
  emailToken_not_in: [String!]
  emailToken_lt: String
  emailToken_lte: String
  emailToken_gt: String
  emailToken_gte: String
  emailToken_contains: String
  emailToken_not_contains: String
  emailToken_starts_with: String
  emailToken_not_starts_with: String
  emailToken_ends_with: String
  emailToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  primaryPhoneNumber: String
  email: String
  googleId: String
  facebookId: String
}
`