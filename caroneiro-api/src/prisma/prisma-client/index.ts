// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  travel: (where?: TravelWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  travel: (where: TravelWhereUniqueInput) => TravelNullablePromise;
  travels: (args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Travel>;
  travelsConnection: (args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TravelConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createTravel: (data: TravelCreateInput) => TravelPromise;
  updateTravel: (args: {
    data: TravelUpdateInput;
    where: TravelWhereUniqueInput;
  }) => TravelPromise;
  updateManyTravels: (args: {
    data: TravelUpdateManyMutationInput;
    where?: TravelWhereInput;
  }) => BatchPayloadPromise;
  upsertTravel: (args: {
    where: TravelWhereUniqueInput;
    create: TravelCreateInput;
    update: TravelUpdateInput;
  }) => TravelPromise;
  deleteTravel: (where: TravelWhereUniqueInput) => TravelPromise;
  deleteManyTravels: (where?: TravelWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  travel: (
    where?: TravelSubscriptionWhereInput
  ) => TravelSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type RecurrenceTypes = "DAILY" | "WEEKLY" | "MONTHLY";

export type TravelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "travelName_ASC"
  | "travelName_DESC"
  | "travelDate_ASC"
  | "travelDate_DESC"
  | "travelCost_ASC"
  | "travelCost_DESC"
  | "isSharingCost_ASC"
  | "isSharingCost_DESC"
  | "isRecurrent_ASC"
  | "isRecurrent_DESC"
  | "recurrenceTimes_ASC"
  | "recurrenceTimes_DESC"
  | "recurrenceType_ASC"
  | "recurrenceType_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "primaryPhoneNumber_ASC"
  | "primaryPhoneNumber_DESC"
  | "secondaryPhoneNumber_ASC"
  | "secondaryPhoneNumber_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "emailIsVerified_ASC"
  | "emailIsVerified_DESC"
  | "primaryPhoneNumberIsVerified_ASC"
  | "primaryPhoneNumberIsVerified_DESC"
  | "googleId_ASC"
  | "googleId_DESC"
  | "facebookId_ASC"
  | "facebookId_DESC"
  | "emailToken_ASC"
  | "emailToken_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type TravelWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TravelWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  travelName?: Maybe<String>;
  travelName_not?: Maybe<String>;
  travelName_in?: Maybe<String[] | String>;
  travelName_not_in?: Maybe<String[] | String>;
  travelName_lt?: Maybe<String>;
  travelName_lte?: Maybe<String>;
  travelName_gt?: Maybe<String>;
  travelName_gte?: Maybe<String>;
  travelName_contains?: Maybe<String>;
  travelName_not_contains?: Maybe<String>;
  travelName_starts_with?: Maybe<String>;
  travelName_not_starts_with?: Maybe<String>;
  travelName_ends_with?: Maybe<String>;
  travelName_not_ends_with?: Maybe<String>;
  travelDate?: Maybe<DateTimeInput>;
  travelDate_not?: Maybe<DateTimeInput>;
  travelDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  travelDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  travelDate_lt?: Maybe<DateTimeInput>;
  travelDate_lte?: Maybe<DateTimeInput>;
  travelDate_gt?: Maybe<DateTimeInput>;
  travelDate_gte?: Maybe<DateTimeInput>;
  travelCost?: Maybe<Float>;
  travelCost_not?: Maybe<Float>;
  travelCost_in?: Maybe<Float[] | Float>;
  travelCost_not_in?: Maybe<Float[] | Float>;
  travelCost_lt?: Maybe<Float>;
  travelCost_lte?: Maybe<Float>;
  travelCost_gt?: Maybe<Float>;
  travelCost_gte?: Maybe<Float>;
  travelOwner?: Maybe<UserWhereInput>;
  passengers_some?: Maybe<UserWhereInput>;
  isSharingCost?: Maybe<Boolean>;
  isSharingCost_not?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  isRecurrent_not?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceTimes_not?: Maybe<Int>;
  recurrenceTimes_in?: Maybe<Int[] | Int>;
  recurrenceTimes_not_in?: Maybe<Int[] | Int>;
  recurrenceTimes_lt?: Maybe<Int>;
  recurrenceTimes_lte?: Maybe<Int>;
  recurrenceTimes_gt?: Maybe<Int>;
  recurrenceTimes_gte?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
  recurrenceType_not?: Maybe<RecurrenceTypes>;
  recurrenceType_in?: Maybe<RecurrenceTypes[] | RecurrenceTypes>;
  recurrenceType_not_in?: Maybe<RecurrenceTypes[] | RecurrenceTypes>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TravelWhereInput[] | TravelWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  primaryPhoneNumber?: Maybe<String>;
  primaryPhoneNumber_not?: Maybe<String>;
  primaryPhoneNumber_in?: Maybe<String[] | String>;
  primaryPhoneNumber_not_in?: Maybe<String[] | String>;
  primaryPhoneNumber_lt?: Maybe<String>;
  primaryPhoneNumber_lte?: Maybe<String>;
  primaryPhoneNumber_gt?: Maybe<String>;
  primaryPhoneNumber_gte?: Maybe<String>;
  primaryPhoneNumber_contains?: Maybe<String>;
  primaryPhoneNumber_not_contains?: Maybe<String>;
  primaryPhoneNumber_starts_with?: Maybe<String>;
  primaryPhoneNumber_not_starts_with?: Maybe<String>;
  primaryPhoneNumber_ends_with?: Maybe<String>;
  primaryPhoneNumber_not_ends_with?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber_not?: Maybe<String>;
  secondaryPhoneNumber_in?: Maybe<String[] | String>;
  secondaryPhoneNumber_not_in?: Maybe<String[] | String>;
  secondaryPhoneNumber_lt?: Maybe<String>;
  secondaryPhoneNumber_lte?: Maybe<String>;
  secondaryPhoneNumber_gt?: Maybe<String>;
  secondaryPhoneNumber_gte?: Maybe<String>;
  secondaryPhoneNumber_contains?: Maybe<String>;
  secondaryPhoneNumber_not_contains?: Maybe<String>;
  secondaryPhoneNumber_starts_with?: Maybe<String>;
  secondaryPhoneNumber_not_starts_with?: Maybe<String>;
  secondaryPhoneNumber_ends_with?: Maybe<String>;
  secondaryPhoneNumber_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  emailIsVerified_not?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified_not?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  googleId_not?: Maybe<String>;
  googleId_in?: Maybe<String[] | String>;
  googleId_not_in?: Maybe<String[] | String>;
  googleId_lt?: Maybe<String>;
  googleId_lte?: Maybe<String>;
  googleId_gt?: Maybe<String>;
  googleId_gte?: Maybe<String>;
  googleId_contains?: Maybe<String>;
  googleId_not_contains?: Maybe<String>;
  googleId_starts_with?: Maybe<String>;
  googleId_not_starts_with?: Maybe<String>;
  googleId_ends_with?: Maybe<String>;
  googleId_not_ends_with?: Maybe<String>;
  facebookId?: Maybe<String>;
  facebookId_not?: Maybe<String>;
  facebookId_in?: Maybe<String[] | String>;
  facebookId_not_in?: Maybe<String[] | String>;
  facebookId_lt?: Maybe<String>;
  facebookId_lte?: Maybe<String>;
  facebookId_gt?: Maybe<String>;
  facebookId_gte?: Maybe<String>;
  facebookId_contains?: Maybe<String>;
  facebookId_not_contains?: Maybe<String>;
  facebookId_starts_with?: Maybe<String>;
  facebookId_not_starts_with?: Maybe<String>;
  facebookId_ends_with?: Maybe<String>;
  facebookId_not_ends_with?: Maybe<String>;
  ownerTravels_some?: Maybe<TravelWhereInput>;
  travelsAsPassenger_some?: Maybe<TravelWhereInput>;
  emailToken?: Maybe<String>;
  emailToken_not?: Maybe<String>;
  emailToken_in?: Maybe<String[] | String>;
  emailToken_not_in?: Maybe<String[] | String>;
  emailToken_lt?: Maybe<String>;
  emailToken_lte?: Maybe<String>;
  emailToken_gt?: Maybe<String>;
  emailToken_gte?: Maybe<String>;
  emailToken_contains?: Maybe<String>;
  emailToken_not_contains?: Maybe<String>;
  emailToken_starts_with?: Maybe<String>;
  emailToken_not_starts_with?: Maybe<String>;
  emailToken_ends_with?: Maybe<String>;
  emailToken_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  primaryPhoneNumber?: Maybe<String>;
  email?: Maybe<String>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
}>;

export interface TravelCreateInput {
  id?: Maybe<ID_Input>;
  travelName: String;
  travelDate: DateTimeInput;
  travelCost: Float;
  travelOwner: UserCreateOneWithoutOwnerTravelsInput;
  passengers?: Maybe<UserCreateManyWithoutTravelsAsPassengerInput>;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface UserCreateOneWithoutOwnerTravelsInput {
  create?: Maybe<UserCreateWithoutOwnerTravelsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOwnerTravelsInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  travelsAsPassenger?: Maybe<TravelCreateManyWithoutPassengersInput>;
  emailToken?: Maybe<String>;
}

export interface TravelCreateManyWithoutPassengersInput {
  create?: Maybe<
    TravelCreateWithoutPassengersInput[] | TravelCreateWithoutPassengersInput
  >;
  connect?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
}

export interface TravelCreateWithoutPassengersInput {
  id?: Maybe<ID_Input>;
  travelName: String;
  travelDate: DateTimeInput;
  travelCost: Float;
  travelOwner: UserCreateOneWithoutOwnerTravelsInput;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface UserCreateManyWithoutTravelsAsPassengerInput {
  create?: Maybe<
    | UserCreateWithoutTravelsAsPassengerInput[]
    | UserCreateWithoutTravelsAsPassengerInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutTravelsAsPassengerInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  ownerTravels?: Maybe<TravelCreateManyWithoutTravelOwnerInput>;
  emailToken?: Maybe<String>;
}

export interface TravelCreateManyWithoutTravelOwnerInput {
  create?: Maybe<
    TravelCreateWithoutTravelOwnerInput[] | TravelCreateWithoutTravelOwnerInput
  >;
  connect?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
}

export interface TravelCreateWithoutTravelOwnerInput {
  id?: Maybe<ID_Input>;
  travelName: String;
  travelDate: DateTimeInput;
  travelCost: Float;
  passengers?: Maybe<UserCreateManyWithoutTravelsAsPassengerInput>;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface TravelUpdateInput {
  travelName?: Maybe<String>;
  travelDate?: Maybe<DateTimeInput>;
  travelCost?: Maybe<Float>;
  travelOwner?: Maybe<UserUpdateOneRequiredWithoutOwnerTravelsInput>;
  passengers?: Maybe<UserUpdateManyWithoutTravelsAsPassengerInput>;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface UserUpdateOneRequiredWithoutOwnerTravelsInput {
  create?: Maybe<UserCreateWithoutOwnerTravelsInput>;
  update?: Maybe<UserUpdateWithoutOwnerTravelsDataInput>;
  upsert?: Maybe<UserUpsertWithoutOwnerTravelsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOwnerTravelsDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  travelsAsPassenger?: Maybe<TravelUpdateManyWithoutPassengersInput>;
  emailToken?: Maybe<String>;
}

export interface TravelUpdateManyWithoutPassengersInput {
  create?: Maybe<
    TravelCreateWithoutPassengersInput[] | TravelCreateWithoutPassengersInput
  >;
  delete?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  connect?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  set?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  disconnect?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  update?: Maybe<
    | TravelUpdateWithWhereUniqueWithoutPassengersInput[]
    | TravelUpdateWithWhereUniqueWithoutPassengersInput
  >;
  upsert?: Maybe<
    | TravelUpsertWithWhereUniqueWithoutPassengersInput[]
    | TravelUpsertWithWhereUniqueWithoutPassengersInput
  >;
  deleteMany?: Maybe<TravelScalarWhereInput[] | TravelScalarWhereInput>;
  updateMany?: Maybe<
    | TravelUpdateManyWithWhereNestedInput[]
    | TravelUpdateManyWithWhereNestedInput
  >;
}

export interface TravelUpdateWithWhereUniqueWithoutPassengersInput {
  where: TravelWhereUniqueInput;
  data: TravelUpdateWithoutPassengersDataInput;
}

export interface TravelUpdateWithoutPassengersDataInput {
  travelName?: Maybe<String>;
  travelDate?: Maybe<DateTimeInput>;
  travelCost?: Maybe<Float>;
  travelOwner?: Maybe<UserUpdateOneRequiredWithoutOwnerTravelsInput>;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface TravelUpsertWithWhereUniqueWithoutPassengersInput {
  where: TravelWhereUniqueInput;
  update: TravelUpdateWithoutPassengersDataInput;
  create: TravelCreateWithoutPassengersInput;
}

export interface TravelScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  travelName?: Maybe<String>;
  travelName_not?: Maybe<String>;
  travelName_in?: Maybe<String[] | String>;
  travelName_not_in?: Maybe<String[] | String>;
  travelName_lt?: Maybe<String>;
  travelName_lte?: Maybe<String>;
  travelName_gt?: Maybe<String>;
  travelName_gte?: Maybe<String>;
  travelName_contains?: Maybe<String>;
  travelName_not_contains?: Maybe<String>;
  travelName_starts_with?: Maybe<String>;
  travelName_not_starts_with?: Maybe<String>;
  travelName_ends_with?: Maybe<String>;
  travelName_not_ends_with?: Maybe<String>;
  travelDate?: Maybe<DateTimeInput>;
  travelDate_not?: Maybe<DateTimeInput>;
  travelDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  travelDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  travelDate_lt?: Maybe<DateTimeInput>;
  travelDate_lte?: Maybe<DateTimeInput>;
  travelDate_gt?: Maybe<DateTimeInput>;
  travelDate_gte?: Maybe<DateTimeInput>;
  travelCost?: Maybe<Float>;
  travelCost_not?: Maybe<Float>;
  travelCost_in?: Maybe<Float[] | Float>;
  travelCost_not_in?: Maybe<Float[] | Float>;
  travelCost_lt?: Maybe<Float>;
  travelCost_lte?: Maybe<Float>;
  travelCost_gt?: Maybe<Float>;
  travelCost_gte?: Maybe<Float>;
  isSharingCost?: Maybe<Boolean>;
  isSharingCost_not?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  isRecurrent_not?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceTimes_not?: Maybe<Int>;
  recurrenceTimes_in?: Maybe<Int[] | Int>;
  recurrenceTimes_not_in?: Maybe<Int[] | Int>;
  recurrenceTimes_lt?: Maybe<Int>;
  recurrenceTimes_lte?: Maybe<Int>;
  recurrenceTimes_gt?: Maybe<Int>;
  recurrenceTimes_gte?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
  recurrenceType_not?: Maybe<RecurrenceTypes>;
  recurrenceType_in?: Maybe<RecurrenceTypes[] | RecurrenceTypes>;
  recurrenceType_not_in?: Maybe<RecurrenceTypes[] | RecurrenceTypes>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TravelScalarWhereInput[] | TravelScalarWhereInput>;
  OR?: Maybe<TravelScalarWhereInput[] | TravelScalarWhereInput>;
  NOT?: Maybe<TravelScalarWhereInput[] | TravelScalarWhereInput>;
}

export interface TravelUpdateManyWithWhereNestedInput {
  where: TravelScalarWhereInput;
  data: TravelUpdateManyDataInput;
}

export interface TravelUpdateManyDataInput {
  travelName?: Maybe<String>;
  travelDate?: Maybe<DateTimeInput>;
  travelCost?: Maybe<Float>;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface UserUpsertWithoutOwnerTravelsInput {
  update: UserUpdateWithoutOwnerTravelsDataInput;
  create: UserCreateWithoutOwnerTravelsInput;
}

export interface UserUpdateManyWithoutTravelsAsPassengerInput {
  create?: Maybe<
    | UserCreateWithoutTravelsAsPassengerInput[]
    | UserCreateWithoutTravelsAsPassengerInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutTravelsAsPassengerInput[]
    | UserUpdateWithWhereUniqueWithoutTravelsAsPassengerInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutTravelsAsPassengerInput[]
    | UserUpsertWithWhereUniqueWithoutTravelsAsPassengerInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutTravelsAsPassengerInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutTravelsAsPassengerDataInput;
}

export interface UserUpdateWithoutTravelsAsPassengerDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  ownerTravels?: Maybe<TravelUpdateManyWithoutTravelOwnerInput>;
  emailToken?: Maybe<String>;
}

export interface TravelUpdateManyWithoutTravelOwnerInput {
  create?: Maybe<
    TravelCreateWithoutTravelOwnerInput[] | TravelCreateWithoutTravelOwnerInput
  >;
  delete?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  connect?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  set?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  disconnect?: Maybe<TravelWhereUniqueInput[] | TravelWhereUniqueInput>;
  update?: Maybe<
    | TravelUpdateWithWhereUniqueWithoutTravelOwnerInput[]
    | TravelUpdateWithWhereUniqueWithoutTravelOwnerInput
  >;
  upsert?: Maybe<
    | TravelUpsertWithWhereUniqueWithoutTravelOwnerInput[]
    | TravelUpsertWithWhereUniqueWithoutTravelOwnerInput
  >;
  deleteMany?: Maybe<TravelScalarWhereInput[] | TravelScalarWhereInput>;
  updateMany?: Maybe<
    | TravelUpdateManyWithWhereNestedInput[]
    | TravelUpdateManyWithWhereNestedInput
  >;
}

export interface TravelUpdateWithWhereUniqueWithoutTravelOwnerInput {
  where: TravelWhereUniqueInput;
  data: TravelUpdateWithoutTravelOwnerDataInput;
}

export interface TravelUpdateWithoutTravelOwnerDataInput {
  travelName?: Maybe<String>;
  travelDate?: Maybe<DateTimeInput>;
  travelCost?: Maybe<Float>;
  passengers?: Maybe<UserUpdateManyWithoutTravelsAsPassengerInput>;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface TravelUpsertWithWhereUniqueWithoutTravelOwnerInput {
  where: TravelWhereUniqueInput;
  update: TravelUpdateWithoutTravelOwnerDataInput;
  create: TravelCreateWithoutTravelOwnerInput;
}

export interface UserUpsertWithWhereUniqueWithoutTravelsAsPassengerInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutTravelsAsPassengerDataInput;
  create: UserCreateWithoutTravelsAsPassengerInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  primaryPhoneNumber?: Maybe<String>;
  primaryPhoneNumber_not?: Maybe<String>;
  primaryPhoneNumber_in?: Maybe<String[] | String>;
  primaryPhoneNumber_not_in?: Maybe<String[] | String>;
  primaryPhoneNumber_lt?: Maybe<String>;
  primaryPhoneNumber_lte?: Maybe<String>;
  primaryPhoneNumber_gt?: Maybe<String>;
  primaryPhoneNumber_gte?: Maybe<String>;
  primaryPhoneNumber_contains?: Maybe<String>;
  primaryPhoneNumber_not_contains?: Maybe<String>;
  primaryPhoneNumber_starts_with?: Maybe<String>;
  primaryPhoneNumber_not_starts_with?: Maybe<String>;
  primaryPhoneNumber_ends_with?: Maybe<String>;
  primaryPhoneNumber_not_ends_with?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber_not?: Maybe<String>;
  secondaryPhoneNumber_in?: Maybe<String[] | String>;
  secondaryPhoneNumber_not_in?: Maybe<String[] | String>;
  secondaryPhoneNumber_lt?: Maybe<String>;
  secondaryPhoneNumber_lte?: Maybe<String>;
  secondaryPhoneNumber_gt?: Maybe<String>;
  secondaryPhoneNumber_gte?: Maybe<String>;
  secondaryPhoneNumber_contains?: Maybe<String>;
  secondaryPhoneNumber_not_contains?: Maybe<String>;
  secondaryPhoneNumber_starts_with?: Maybe<String>;
  secondaryPhoneNumber_not_starts_with?: Maybe<String>;
  secondaryPhoneNumber_ends_with?: Maybe<String>;
  secondaryPhoneNumber_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  emailIsVerified_not?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified_not?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  googleId_not?: Maybe<String>;
  googleId_in?: Maybe<String[] | String>;
  googleId_not_in?: Maybe<String[] | String>;
  googleId_lt?: Maybe<String>;
  googleId_lte?: Maybe<String>;
  googleId_gt?: Maybe<String>;
  googleId_gte?: Maybe<String>;
  googleId_contains?: Maybe<String>;
  googleId_not_contains?: Maybe<String>;
  googleId_starts_with?: Maybe<String>;
  googleId_not_starts_with?: Maybe<String>;
  googleId_ends_with?: Maybe<String>;
  googleId_not_ends_with?: Maybe<String>;
  facebookId?: Maybe<String>;
  facebookId_not?: Maybe<String>;
  facebookId_in?: Maybe<String[] | String>;
  facebookId_not_in?: Maybe<String[] | String>;
  facebookId_lt?: Maybe<String>;
  facebookId_lte?: Maybe<String>;
  facebookId_gt?: Maybe<String>;
  facebookId_gte?: Maybe<String>;
  facebookId_contains?: Maybe<String>;
  facebookId_not_contains?: Maybe<String>;
  facebookId_starts_with?: Maybe<String>;
  facebookId_not_starts_with?: Maybe<String>;
  facebookId_ends_with?: Maybe<String>;
  facebookId_not_ends_with?: Maybe<String>;
  emailToken?: Maybe<String>;
  emailToken_not?: Maybe<String>;
  emailToken_in?: Maybe<String[] | String>;
  emailToken_not_in?: Maybe<String[] | String>;
  emailToken_lt?: Maybe<String>;
  emailToken_lte?: Maybe<String>;
  emailToken_gt?: Maybe<String>;
  emailToken_gte?: Maybe<String>;
  emailToken_contains?: Maybe<String>;
  emailToken_not_contains?: Maybe<String>;
  emailToken_starts_with?: Maybe<String>;
  emailToken_not_starts_with?: Maybe<String>;
  emailToken_ends_with?: Maybe<String>;
  emailToken_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  emailToken?: Maybe<String>;
}

export interface TravelUpdateManyMutationInput {
  travelName?: Maybe<String>;
  travelDate?: Maybe<DateTimeInput>;
  travelCost?: Maybe<Float>;
  isSharingCost?: Maybe<Boolean>;
  isRecurrent?: Maybe<Boolean>;
  recurrenceTimes?: Maybe<Int>;
  recurrenceType?: Maybe<RecurrenceTypes>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstName: String;
  lastName: String;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  ownerTravels?: Maybe<TravelCreateManyWithoutTravelOwnerInput>;
  travelsAsPassenger?: Maybe<TravelCreateManyWithoutPassengersInput>;
  emailToken?: Maybe<String>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  ownerTravels?: Maybe<TravelUpdateManyWithoutTravelOwnerInput>;
  travelsAsPassenger?: Maybe<TravelUpdateManyWithoutPassengersInput>;
  emailToken?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  primaryPhoneNumber?: Maybe<String>;
  secondaryPhoneNumber?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  emailIsVerified?: Maybe<Boolean>;
  primaryPhoneNumberIsVerified?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  facebookId?: Maybe<String>;
  emailToken?: Maybe<String>;
}

export interface TravelSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TravelWhereInput>;
  AND?: Maybe<TravelSubscriptionWhereInput[] | TravelSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Travel {
  id: ID_Output;
  travelName: String;
  travelDate: DateTimeOutput;
  travelCost: Float;
  isSharingCost?: Boolean;
  isRecurrent?: Boolean;
  recurrenceTimes?: Int;
  recurrenceType?: RecurrenceTypes;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TravelPromise extends Promise<Travel>, Fragmentable {
  id: () => Promise<ID_Output>;
  travelName: () => Promise<String>;
  travelDate: () => Promise<DateTimeOutput>;
  travelCost: () => Promise<Float>;
  travelOwner: <T = UserPromise>() => T;
  passengers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isSharingCost: () => Promise<Boolean>;
  isRecurrent: () => Promise<Boolean>;
  recurrenceTimes: () => Promise<Int>;
  recurrenceType: () => Promise<RecurrenceTypes>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TravelSubscription
  extends Promise<AsyncIterator<Travel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  travelName: () => Promise<AsyncIterator<String>>;
  travelDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  travelCost: () => Promise<AsyncIterator<Float>>;
  travelOwner: <T = UserSubscription>() => T;
  passengers: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isSharingCost: () => Promise<AsyncIterator<Boolean>>;
  isRecurrent: () => Promise<AsyncIterator<Boolean>>;
  recurrenceTimes: () => Promise<AsyncIterator<Int>>;
  recurrenceType: () => Promise<AsyncIterator<RecurrenceTypes>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TravelNullablePromise
  extends Promise<Travel | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  travelName: () => Promise<String>;
  travelDate: () => Promise<DateTimeOutput>;
  travelCost: () => Promise<Float>;
  travelOwner: <T = UserPromise>() => T;
  passengers: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  isSharingCost: () => Promise<Boolean>;
  isRecurrent: () => Promise<Boolean>;
  recurrenceTimes: () => Promise<Int>;
  recurrenceType: () => Promise<RecurrenceTypes>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstName: String;
  lastName: String;
  primaryPhoneNumber?: String;
  secondaryPhoneNumber?: String;
  email: String;
  password?: String;
  emailIsVerified?: Boolean;
  primaryPhoneNumberIsVerified?: Boolean;
  googleId?: String;
  facebookId?: String;
  emailToken?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  primaryPhoneNumber: () => Promise<String>;
  secondaryPhoneNumber: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  emailIsVerified: () => Promise<Boolean>;
  primaryPhoneNumberIsVerified: () => Promise<Boolean>;
  googleId: () => Promise<String>;
  facebookId: () => Promise<String>;
  ownerTravels: <T = FragmentableArray<Travel>>(args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  travelsAsPassenger: <T = FragmentableArray<Travel>>(args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  emailToken: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  primaryPhoneNumber: () => Promise<AsyncIterator<String>>;
  secondaryPhoneNumber: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  emailIsVerified: () => Promise<AsyncIterator<Boolean>>;
  primaryPhoneNumberIsVerified: () => Promise<AsyncIterator<Boolean>>;
  googleId: () => Promise<AsyncIterator<String>>;
  facebookId: () => Promise<AsyncIterator<String>>;
  ownerTravels: <T = Promise<AsyncIterator<TravelSubscription>>>(args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  travelsAsPassenger: <T = Promise<AsyncIterator<TravelSubscription>>>(args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  emailToken: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  primaryPhoneNumber: () => Promise<String>;
  secondaryPhoneNumber: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  emailIsVerified: () => Promise<Boolean>;
  primaryPhoneNumberIsVerified: () => Promise<Boolean>;
  googleId: () => Promise<String>;
  facebookId: () => Promise<String>;
  ownerTravels: <T = FragmentableArray<Travel>>(args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  travelsAsPassenger: <T = FragmentableArray<Travel>>(args?: {
    where?: TravelWhereInput;
    orderBy?: TravelOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  emailToken: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TravelConnection {
  pageInfo: PageInfo;
  edges: TravelEdge[];
}

export interface TravelConnectionPromise
  extends Promise<TravelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TravelEdge>>() => T;
  aggregate: <T = AggregateTravelPromise>() => T;
}

export interface TravelConnectionSubscription
  extends Promise<AsyncIterator<TravelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TravelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTravelSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface TravelEdge {
  node: Travel;
  cursor: String;
}

export interface TravelEdgePromise extends Promise<TravelEdge>, Fragmentable {
  node: <T = TravelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TravelEdgeSubscription
  extends Promise<AsyncIterator<TravelEdge>>,
    Fragmentable {
  node: <T = TravelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTravel {
  count: Int;
}

export interface AggregateTravelPromise
  extends Promise<AggregateTravel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTravelSubscription
  extends Promise<AsyncIterator<AggregateTravel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface TravelSubscriptionPayload {
  mutation: MutationType;
  node: Travel;
  updatedFields: String[];
  previousValues: TravelPreviousValues;
}

export interface TravelSubscriptionPayloadPromise
  extends Promise<TravelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TravelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TravelPreviousValuesPromise>() => T;
}

export interface TravelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TravelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TravelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TravelPreviousValuesSubscription>() => T;
}

export interface TravelPreviousValues {
  id: ID_Output;
  travelName: String;
  travelDate: DateTimeOutput;
  travelCost: Float;
  isSharingCost?: Boolean;
  isRecurrent?: Boolean;
  recurrenceTimes?: Int;
  recurrenceType?: RecurrenceTypes;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface TravelPreviousValuesPromise
  extends Promise<TravelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  travelName: () => Promise<String>;
  travelDate: () => Promise<DateTimeOutput>;
  travelCost: () => Promise<Float>;
  isSharingCost: () => Promise<Boolean>;
  isRecurrent: () => Promise<Boolean>;
  recurrenceTimes: () => Promise<Int>;
  recurrenceType: () => Promise<RecurrenceTypes>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface TravelPreviousValuesSubscription
  extends Promise<AsyncIterator<TravelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  travelName: () => Promise<AsyncIterator<String>>;
  travelDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  travelCost: () => Promise<AsyncIterator<Float>>;
  isSharingCost: () => Promise<AsyncIterator<Boolean>>;
  isRecurrent: () => Promise<AsyncIterator<Boolean>>;
  recurrenceTimes: () => Promise<AsyncIterator<Int>>;
  recurrenceType: () => Promise<AsyncIterator<RecurrenceTypes>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName: String;
  lastName: String;
  primaryPhoneNumber?: String;
  secondaryPhoneNumber?: String;
  email: String;
  password?: String;
  emailIsVerified?: Boolean;
  primaryPhoneNumberIsVerified?: Boolean;
  googleId?: String;
  facebookId?: String;
  emailToken?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  primaryPhoneNumber: () => Promise<String>;
  secondaryPhoneNumber: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  emailIsVerified: () => Promise<Boolean>;
  primaryPhoneNumberIsVerified: () => Promise<Boolean>;
  googleId: () => Promise<String>;
  facebookId: () => Promise<String>;
  emailToken: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  primaryPhoneNumber: () => Promise<AsyncIterator<String>>;
  secondaryPhoneNumber: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  emailIsVerified: () => Promise<AsyncIterator<Boolean>>;
  primaryPhoneNumberIsVerified: () => Promise<AsyncIterator<Boolean>>;
  googleId: () => Promise<AsyncIterator<String>>;
  facebookId: () => Promise<AsyncIterator<String>>;
  emailToken: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "RecurrenceTypes",
    embedded: false
  },
  {
    name: "Travel",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `https://prisma.cluster.caroneiroapp.com.br/caroneiro/${
    process.env["NODE_ENV"]
  }`,
  secret: `79dea521ddb251eb9700d849fa5fbf94`
});
export const prisma = new Prisma();
