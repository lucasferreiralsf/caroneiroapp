type AggregateTravel {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createTravel(data: TravelCreateInput!): Travel!
  updateTravel(data: TravelUpdateInput!, where: TravelWhereUniqueInput!): Travel
  updateManyTravels(data: TravelUpdateManyMutationInput!, where: TravelWhereInput): BatchPayload!
  upsertTravel(where: TravelWhereUniqueInput!, create: TravelCreateInput!, update: TravelUpdateInput!): Travel!
  deleteTravel(where: TravelWhereUniqueInput!): Travel
  deleteManyTravels(where: TravelWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  travel(where: TravelWhereUniqueInput!): Travel
  travels(where: TravelWhereInput, orderBy: TravelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Travel]!
  travelsConnection(where: TravelWhereInput, orderBy: TravelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TravelConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum RecurrenceTypes {
  DAILY
  WEEKLY
  MONTHLY
}

type Subscription {
  travel(where: TravelSubscriptionWhereInput): TravelSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Travel {
  id: ID!
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  travelOwner: User!
  passengers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TravelConnection {
  pageInfo: PageInfo!
  edges: [TravelEdge]!
  aggregate: AggregateTravel!
}

input TravelCreateInput {
  id: ID
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  travelOwner: UserCreateOneWithoutOwnerTravelsInput!
  passengers: UserCreateManyWithoutTravelsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TravelCreateManyWithoutPassengersInput {
  create: [TravelCreateWithoutPassengersInput!]
  connect: [TravelWhereUniqueInput!]
}

input TravelCreateManyWithoutTravelOwnerInput {
  create: [TravelCreateWithoutTravelOwnerInput!]
  connect: [TravelWhereUniqueInput!]
}

input TravelCreateWithoutPassengersInput {
  id: ID
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  travelOwner: UserCreateOneWithoutOwnerTravelsInput!
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TravelCreateWithoutTravelOwnerInput {
  id: ID
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  passengers: UserCreateManyWithoutTravelsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

type TravelEdge {
  node: Travel!
  cursor: String!
}

enum TravelOrderByInput {
  id_ASC
  id_DESC
  travelName_ASC
  travelName_DESC
  travelDate_ASC
  travelDate_DESC
  travelCost_ASC
  travelCost_DESC
  isSharingCost_ASC
  isSharingCost_DESC
  isRecurrent_ASC
  isRecurrent_DESC
  recurrenceTimes_ASC
  recurrenceTimes_DESC
  recurrenceType_ASC
  recurrenceType_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TravelPreviousValues {
  id: ID!
  travelName: String!
  travelDate: DateTime!
  travelCost: Float!
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TravelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  travelName: String
  travelName_not: String
  travelName_in: [String!]
  travelName_not_in: [String!]
  travelName_lt: String
  travelName_lte: String
  travelName_gt: String
  travelName_gte: String
  travelName_contains: String
  travelName_not_contains: String
  travelName_starts_with: String
  travelName_not_starts_with: String
  travelName_ends_with: String
  travelName_not_ends_with: String
  travelDate: DateTime
  travelDate_not: DateTime
  travelDate_in: [DateTime!]
  travelDate_not_in: [DateTime!]
  travelDate_lt: DateTime
  travelDate_lte: DateTime
  travelDate_gt: DateTime
  travelDate_gte: DateTime
  travelCost: Float
  travelCost_not: Float
  travelCost_in: [Float!]
  travelCost_not_in: [Float!]
  travelCost_lt: Float
  travelCost_lte: Float
  travelCost_gt: Float
  travelCost_gte: Float
  isSharingCost: Boolean
  isSharingCost_not: Boolean
  isRecurrent: Boolean
  isRecurrent_not: Boolean
  recurrenceTimes: Int
  recurrenceTimes_not: Int
  recurrenceTimes_in: [Int!]
  recurrenceTimes_not_in: [Int!]
  recurrenceTimes_lt: Int
  recurrenceTimes_lte: Int
  recurrenceTimes_gt: Int
  recurrenceTimes_gte: Int
  recurrenceType: RecurrenceTypes
  recurrenceType_not: RecurrenceTypes
  recurrenceType_in: [RecurrenceTypes!]
  recurrenceType_not_in: [RecurrenceTypes!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TravelScalarWhereInput!]
  OR: [TravelScalarWhereInput!]
  NOT: [TravelScalarWhereInput!]
}

type TravelSubscriptionPayload {
  mutation: MutationType!
  node: Travel
  updatedFields: [String!]
  previousValues: TravelPreviousValues
}

input TravelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TravelWhereInput
  AND: [TravelSubscriptionWhereInput!]
}

input TravelUpdateInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  travelOwner: UserUpdateOneRequiredWithoutOwnerTravelsInput
  passengers: UserUpdateManyWithoutTravelsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TravelUpdateManyDataInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TravelUpdateManyMutationInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TravelUpdateManyWithoutPassengersInput {
  create: [TravelCreateWithoutPassengersInput!]
  delete: [TravelWhereUniqueInput!]
  connect: [TravelWhereUniqueInput!]
  set: [TravelWhereUniqueInput!]
  disconnect: [TravelWhereUniqueInput!]
  update: [TravelUpdateWithWhereUniqueWithoutPassengersInput!]
  upsert: [TravelUpsertWithWhereUniqueWithoutPassengersInput!]
  deleteMany: [TravelScalarWhereInput!]
  updateMany: [TravelUpdateManyWithWhereNestedInput!]
}

input TravelUpdateManyWithoutTravelOwnerInput {
  create: [TravelCreateWithoutTravelOwnerInput!]
  delete: [TravelWhereUniqueInput!]
  connect: [TravelWhereUniqueInput!]
  set: [TravelWhereUniqueInput!]
  disconnect: [TravelWhereUniqueInput!]
  update: [TravelUpdateWithWhereUniqueWithoutTravelOwnerInput!]
  upsert: [TravelUpsertWithWhereUniqueWithoutTravelOwnerInput!]
  deleteMany: [TravelScalarWhereInput!]
  updateMany: [TravelUpdateManyWithWhereNestedInput!]
}

input TravelUpdateManyWithWhereNestedInput {
  where: TravelScalarWhereInput!
  data: TravelUpdateManyDataInput!
}

input TravelUpdateWithoutPassengersDataInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  travelOwner: UserUpdateOneRequiredWithoutOwnerTravelsInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TravelUpdateWithoutTravelOwnerDataInput {
  travelName: String
  travelDate: DateTime
  travelCost: Float
  passengers: UserUpdateManyWithoutTravelsAsPassengerInput
  isSharingCost: Boolean
  isRecurrent: Boolean
  recurrenceTimes: Int
  recurrenceType: RecurrenceTypes
}

input TravelUpdateWithWhereUniqueWithoutPassengersInput {
  where: TravelWhereUniqueInput!
  data: TravelUpdateWithoutPassengersDataInput!
}

input TravelUpdateWithWhereUniqueWithoutTravelOwnerInput {
  where: TravelWhereUniqueInput!
  data: TravelUpdateWithoutTravelOwnerDataInput!
}

input TravelUpsertWithWhereUniqueWithoutPassengersInput {
  where: TravelWhereUniqueInput!
  update: TravelUpdateWithoutPassengersDataInput!
  create: TravelCreateWithoutPassengersInput!
}

input TravelUpsertWithWhereUniqueWithoutTravelOwnerInput {
  where: TravelWhereUniqueInput!
  update: TravelUpdateWithoutTravelOwnerDataInput!
  create: TravelCreateWithoutTravelOwnerInput!
}

input TravelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  travelName: String
  travelName_not: String
  travelName_in: [String!]
  travelName_not_in: [String!]
  travelName_lt: String
  travelName_lte: String
  travelName_gt: String
  travelName_gte: String
  travelName_contains: String
  travelName_not_contains: String
  travelName_starts_with: String
  travelName_not_starts_with: String
  travelName_ends_with: String
  travelName_not_ends_with: String
  travelDate: DateTime
  travelDate_not: DateTime
  travelDate_in: [DateTime!]
  travelDate_not_in: [DateTime!]
  travelDate_lt: DateTime
  travelDate_lte: DateTime
  travelDate_gt: DateTime
  travelDate_gte: DateTime
  travelCost: Float
  travelCost_not: Float
  travelCost_in: [Float!]
  travelCost_not_in: [Float!]
  travelCost_lt: Float
  travelCost_lte: Float
  travelCost_gt: Float
  travelCost_gte: Float
  travelOwner: UserWhereInput
  passengers_some: UserWhereInput
  isSharingCost: Boolean
  isSharingCost_not: Boolean
  isRecurrent: Boolean
  isRecurrent_not: Boolean
  recurrenceTimes: Int
  recurrenceTimes_not: Int
  recurrenceTimes_in: [Int!]
  recurrenceTimes_not_in: [Int!]
  recurrenceTimes_lt: Int
  recurrenceTimes_lte: Int
  recurrenceTimes_gt: Int
  recurrenceTimes_gte: Int
  recurrenceType: RecurrenceTypes
  recurrenceType_not: RecurrenceTypes
  recurrenceType_in: [RecurrenceTypes!]
  recurrenceType_not_in: [RecurrenceTypes!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TravelWhereInput!]
}

input TravelWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTravels(where: TravelWhereInput, orderBy: TravelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Travel!]
  travelsAsPassenger(where: TravelWhereInput, orderBy: TravelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Travel!]
  emailToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTravels: TravelCreateManyWithoutTravelOwnerInput
  travelsAsPassenger: TravelCreateManyWithoutPassengersInput
  emailToken: String
}

input UserCreateManyWithoutTravelsAsPassengerInput {
  create: [UserCreateWithoutTravelsAsPassengerInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutOwnerTravelsInput {
  create: UserCreateWithoutOwnerTravelsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutOwnerTravelsInput {
  id: ID
  firstName: String!
  lastName: String!
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  travelsAsPassenger: TravelCreateManyWithoutPassengersInput
  emailToken: String
}

input UserCreateWithoutTravelsAsPassengerInput {
  id: ID
  firstName: String!
  lastName: String!
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTravels: TravelCreateManyWithoutTravelOwnerInput
  emailToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  picture_ASC
  picture_DESC
  primaryPhoneNumber_ASC
  primaryPhoneNumber_DESC
  secondaryPhoneNumber_ASC
  secondaryPhoneNumber_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  emailIsVerified_ASC
  emailIsVerified_DESC
  primaryPhoneNumberIsVerified_ASC
  primaryPhoneNumberIsVerified_DESC
  googleId_ASC
  googleId_DESC
  facebookId_ASC
  facebookId_DESC
  emailToken_ASC
  emailToken_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String!
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  emailToken: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  primaryPhoneNumber: String
  primaryPhoneNumber_not: String
  primaryPhoneNumber_in: [String!]
  primaryPhoneNumber_not_in: [String!]
  primaryPhoneNumber_lt: String
  primaryPhoneNumber_lte: String
  primaryPhoneNumber_gt: String
  primaryPhoneNumber_gte: String
  primaryPhoneNumber_contains: String
  primaryPhoneNumber_not_contains: String
  primaryPhoneNumber_starts_with: String
  primaryPhoneNumber_not_starts_with: String
  primaryPhoneNumber_ends_with: String
  primaryPhoneNumber_not_ends_with: String
  secondaryPhoneNumber: String
  secondaryPhoneNumber_not: String
  secondaryPhoneNumber_in: [String!]
  secondaryPhoneNumber_not_in: [String!]
  secondaryPhoneNumber_lt: String
  secondaryPhoneNumber_lte: String
  secondaryPhoneNumber_gt: String
  secondaryPhoneNumber_gte: String
  secondaryPhoneNumber_contains: String
  secondaryPhoneNumber_not_contains: String
  secondaryPhoneNumber_starts_with: String
  secondaryPhoneNumber_not_starts_with: String
  secondaryPhoneNumber_ends_with: String
  secondaryPhoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailIsVerified: Boolean
  emailIsVerified_not: Boolean
  primaryPhoneNumberIsVerified: Boolean
  primaryPhoneNumberIsVerified_not: Boolean
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  facebookId: String
  facebookId_not: String
  facebookId_in: [String!]
  facebookId_not_in: [String!]
  facebookId_lt: String
  facebookId_lte: String
  facebookId_gt: String
  facebookId_gte: String
  facebookId_contains: String
  facebookId_not_contains: String
  facebookId_starts_with: String
  facebookId_not_starts_with: String
  facebookId_ends_with: String
  facebookId_not_ends_with: String
  emailToken: String
  emailToken_not: String
  emailToken_in: [String!]
  emailToken_not_in: [String!]
  emailToken_lt: String
  emailToken_lte: String
  emailToken_gt: String
  emailToken_gte: String
  emailToken_contains: String
  emailToken_not_contains: String
  emailToken_starts_with: String
  emailToken_not_starts_with: String
  emailToken_ends_with: String
  emailToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  firstName: String
  lastName: String
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTravels: TravelUpdateManyWithoutTravelOwnerInput
  travelsAsPassenger: TravelUpdateManyWithoutPassengersInput
  emailToken: String
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  emailToken: String
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  emailToken: String
}

input UserUpdateManyWithoutTravelsAsPassengerInput {
  create: [UserCreateWithoutTravelsAsPassengerInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTravelsAsPassengerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTravelsAsPassengerInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutOwnerTravelsInput {
  create: UserCreateWithoutOwnerTravelsInput
  update: UserUpdateWithoutOwnerTravelsDataInput
  upsert: UserUpsertWithoutOwnerTravelsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutOwnerTravelsDataInput {
  firstName: String
  lastName: String
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  travelsAsPassenger: TravelUpdateManyWithoutPassengersInput
  emailToken: String
}

input UserUpdateWithoutTravelsAsPassengerDataInput {
  firstName: String
  lastName: String
  picture: String
  primaryPhoneNumber: String
  secondaryPhoneNumber: String
  email: String
  password: String
  emailIsVerified: Boolean
  primaryPhoneNumberIsVerified: Boolean
  googleId: String
  facebookId: String
  ownerTravels: TravelUpdateManyWithoutTravelOwnerInput
  emailToken: String
}

input UserUpdateWithWhereUniqueWithoutTravelsAsPassengerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTravelsAsPassengerDataInput!
}

input UserUpsertWithoutOwnerTravelsInput {
  update: UserUpdateWithoutOwnerTravelsDataInput!
  create: UserCreateWithoutOwnerTravelsInput!
}

input UserUpsertWithWhereUniqueWithoutTravelsAsPassengerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTravelsAsPassengerDataInput!
  create: UserCreateWithoutTravelsAsPassengerInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  picture: String
  picture_not: String
  picture_in: [String!]
  picture_not_in: [String!]
  picture_lt: String
  picture_lte: String
  picture_gt: String
  picture_gte: String
  picture_contains: String
  picture_not_contains: String
  picture_starts_with: String
  picture_not_starts_with: String
  picture_ends_with: String
  picture_not_ends_with: String
  primaryPhoneNumber: String
  primaryPhoneNumber_not: String
  primaryPhoneNumber_in: [String!]
  primaryPhoneNumber_not_in: [String!]
  primaryPhoneNumber_lt: String
  primaryPhoneNumber_lte: String
  primaryPhoneNumber_gt: String
  primaryPhoneNumber_gte: String
  primaryPhoneNumber_contains: String
  primaryPhoneNumber_not_contains: String
  primaryPhoneNumber_starts_with: String
  primaryPhoneNumber_not_starts_with: String
  primaryPhoneNumber_ends_with: String
  primaryPhoneNumber_not_ends_with: String
  secondaryPhoneNumber: String
  secondaryPhoneNumber_not: String
  secondaryPhoneNumber_in: [String!]
  secondaryPhoneNumber_not_in: [String!]
  secondaryPhoneNumber_lt: String
  secondaryPhoneNumber_lte: String
  secondaryPhoneNumber_gt: String
  secondaryPhoneNumber_gte: String
  secondaryPhoneNumber_contains: String
  secondaryPhoneNumber_not_contains: String
  secondaryPhoneNumber_starts_with: String
  secondaryPhoneNumber_not_starts_with: String
  secondaryPhoneNumber_ends_with: String
  secondaryPhoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  emailIsVerified: Boolean
  emailIsVerified_not: Boolean
  primaryPhoneNumberIsVerified: Boolean
  primaryPhoneNumberIsVerified_not: Boolean
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  facebookId: String
  facebookId_not: String
  facebookId_in: [String!]
  facebookId_not_in: [String!]
  facebookId_lt: String
  facebookId_lte: String
  facebookId_gt: String
  facebookId_gte: String
  facebookId_contains: String
  facebookId_not_contains: String
  facebookId_starts_with: String
  facebookId_not_starts_with: String
  facebookId_ends_with: String
  facebookId_not_ends_with: String
  ownerTravels_some: TravelWhereInput
  travelsAsPassenger_some: TravelWhereInput
  emailToken: String
  emailToken_not: String
  emailToken_in: [String!]
  emailToken_not_in: [String!]
  emailToken_lt: String
  emailToken_lte: String
  emailToken_gt: String
  emailToken_gte: String
  emailToken_contains: String
  emailToken_not_contains: String
  emailToken_starts_with: String
  emailToken_not_starts_with: String
  emailToken_ends_with: String
  emailToken_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  primaryPhoneNumber: String
  email: String
  googleId: String
  facebookId: String
}
